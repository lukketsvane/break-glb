{"version":3,"sources":["../hooks.ts"],"names":["useBreakGLB","isExploded","setIsExploded","useState","selectedPart","setSelectedPart","isLoading","setIsLoading","error","setError","parts","setParts","explode","useCallback","assemble","toggleExplode","prev","selectPart","partId","clearError","useModelControls","ref","useRef","controls","id","useKeyboardShortcuts","shortcuts","callbacks","useEffect","handleKeyDown","event","key","useFileUpload","onUpload","options","isDragging","setIsDragging","handleFileSelect","file","maxSize","allowedExtensions","fileName","ext","handleDragOver","e","handleDragLeave","handleDrop","files","f","useAnimationFrame","callback","deps","requestRef","previousTimeRef","animate","time","deltaTime","useLocalStorage","initialValue","storedValue","setStoredValue","item","setValue","value"],"mappings":"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","file":"hooks.js","sourcesContent":["import { useState, useCallback, useEffect, useRef } from \"react\"\r\nimport type { BreakGLBRef, ModelPart } from \"./types\"\r\n\r\n// ============================================================================\r\n// useBreakGLB Hook\r\n// ============================================================================\r\n\r\nexport function useBreakGLB() {\r\n  const [isExploded, setIsExploded] = useState(false)\r\n  const [selectedPart, setSelectedPart] = useState<string | null>(null)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState<Error | null>(null)\r\n  const [parts, setParts] = useState<ModelPart[]>([])\r\n\r\n  const explode = useCallback(() => {\r\n    setIsExploded(true)\r\n  }, [])\r\n\r\n  const assemble = useCallback(() => {\r\n    setIsExploded(false)\r\n  }, [])\r\n\r\n  const toggleExplode = useCallback(() => {\r\n    setIsExploded((prev) => !prev)\r\n  }, [])\r\n\r\n  const selectPart = useCallback((partId: string | null) => {\r\n    setSelectedPart(partId)\r\n  }, [])\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null)\r\n  }, [])\r\n\r\n  return {\r\n    isExploded,\r\n    selectedPart,\r\n    isLoading,\r\n    error,\r\n    parts,\r\n    explode,\r\n    assemble,\r\n    toggleExplode,\r\n    selectPart,\r\n    setIsLoading,\r\n    setError,\r\n    setParts,\r\n    clearError,\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// useModelControls Hook - For imperative control\r\n// ============================================================================\r\n\r\nexport function useModelControls(): [\r\n  React.RefObject<BreakGLBRef | null>,\r\n  {\r\n    explode: () => void\r\n    assemble: () => void\r\n    toggle: () => void\r\n    selectPart: (id: string | null) => void\r\n    resetCamera: () => void\r\n  }\r\n] {\r\n  const ref = useRef<BreakGLBRef | null>(null)\r\n\r\n  const controls = {\r\n    explode: useCallback(() => ref.current?.explode(), []),\r\n    assemble: useCallback(() => ref.current?.assemble(), []),\r\n    toggle: useCallback(() => ref.current?.toggleExplode(), []),\r\n    selectPart: useCallback((id: string | null) => ref.current?.selectPart(id), []),\r\n    resetCamera: useCallback(() => ref.current?.resetCamera(), []),\r\n  }\r\n\r\n  return [ref, controls]\r\n}\r\n\r\n// ============================================================================\r\n// useKeyboardShortcuts Hook\r\n// ============================================================================\r\n\r\nexport interface KeyboardShortcuts {\r\n  explode?: string\r\n  assemble?: string\r\n  toggle?: string\r\n  resetCamera?: string\r\n}\r\n\r\nexport function useKeyboardShortcuts(\r\n  shortcuts: KeyboardShortcuts,\r\n  callbacks: {\r\n    onExplode?: () => void\r\n    onAssemble?: () => void\r\n    onToggle?: () => void\r\n    onResetCamera?: () => void\r\n  }\r\n) {\r\n  useEffect(() => {\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      const key = event.key.toLowerCase()\r\n\r\n      if (shortcuts.explode && key === shortcuts.explode.toLowerCase()) {\r\n        event.preventDefault()\r\n        callbacks.onExplode?.()\r\n      } else if (shortcuts.assemble && key === shortcuts.assemble.toLowerCase()) {\r\n        event.preventDefault()\r\n        callbacks.onAssemble?.()\r\n      } else if (shortcuts.toggle && key === shortcuts.toggle.toLowerCase()) {\r\n        event.preventDefault()\r\n        callbacks.onToggle?.()\r\n      } else if (shortcuts.resetCamera && key === shortcuts.resetCamera.toLowerCase()) {\r\n        event.preventDefault()\r\n        callbacks.onResetCamera?.()\r\n      }\r\n    }\r\n\r\n    window.addEventListener(\"keydown\", handleKeyDown)\r\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\r\n  }, [shortcuts, callbacks])\r\n}\r\n\r\n// ============================================================================\r\n// useFileUpload Hook\r\n// ============================================================================\r\n\r\nexport function useFileUpload(\r\n  onUpload: (file: File) => void,\r\n  options?: {\r\n    maxSize?: number\r\n    allowedExtensions?: string[]\r\n  }\r\n) {\r\n  const [isDragging, setIsDragging] = useState(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  const handleFileSelect = useCallback(\r\n    (file: File) => {\r\n      setError(null)\r\n\r\n      // Validate file size\r\n      const maxSize = options?.maxSize || 100 * 1024 * 1024 // 100MB default\r\n      if (file.size > maxSize) {\r\n        setError(`File too large. Maximum size is ${maxSize / 1024 / 1024}MB`)\r\n        return\r\n      }\r\n\r\n      // Validate file extension\r\n      const allowedExtensions = options?.allowedExtensions || [\".glb\"]\r\n      const fileName = file.name.toLowerCase()\r\n      const isValidExtension = allowedExtensions.some((ext) => fileName.endsWith(ext))\r\n\r\n      if (!isValidExtension) {\r\n        setError(`Invalid file format. Allowed: ${allowedExtensions.join(\", \")}`)\r\n        return\r\n      }\r\n\r\n      onUpload(file)\r\n    },\r\n    [onUpload, options]\r\n  )\r\n\r\n  const handleDragOver = useCallback((e: React.DragEvent) => {\r\n    e.preventDefault()\r\n    setIsDragging(true)\r\n  }, [])\r\n\r\n  const handleDragLeave = useCallback((e: React.DragEvent) => {\r\n    e.preventDefault()\r\n    setIsDragging(false)\r\n  }, [])\r\n\r\n  const handleDrop = useCallback(\r\n    (e: React.DragEvent) => {\r\n      e.preventDefault()\r\n      setIsDragging(false)\r\n\r\n      const files = Array.from(e.dataTransfer.files)\r\n      const allowedExtensions = options?.allowedExtensions || [\".glb\"]\r\n      const file = files.find((f) =>\r\n        allowedExtensions.some((ext) => f.name.toLowerCase().endsWith(ext))\r\n      )\r\n\r\n      if (file) {\r\n        handleFileSelect(file)\r\n      } else {\r\n        setError(`No valid file found. Allowed: ${allowedExtensions.join(\", \")}`)\r\n      }\r\n    },\r\n    [handleFileSelect, options]\r\n  )\r\n\r\n  return {\r\n    isDragging,\r\n    error,\r\n    handleFileSelect,\r\n    handleDragOver,\r\n    handleDragLeave,\r\n    handleDrop,\r\n    clearError: () => setError(null),\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// useAnimationFrame Hook\r\n// ============================================================================\r\n\r\nexport function useAnimationFrame(callback: (deltaTime: number) => void, deps: any[] = []) {\r\n  const requestRef = useRef<number | undefined>(undefined)\r\n  const previousTimeRef = useRef<number | undefined>(undefined)\r\n\r\n  const animate = useCallback(\r\n    (time: number) => {\r\n      if (previousTimeRef.current !== undefined) {\r\n        const deltaTime = time - previousTimeRef.current\r\n        callback(deltaTime)\r\n      }\r\n      previousTimeRef.current = time\r\n      requestRef.current = requestAnimationFrame(animate)\r\n    },\r\n    [callback]\r\n  )\r\n\r\n  useEffect(() => {\r\n    requestRef.current = requestAnimationFrame(animate)\r\n    return () => {\r\n      if (requestRef.current) {\r\n        cancelAnimationFrame(requestRef.current)\r\n      }\r\n    }\r\n  }, [animate])\r\n}\r\n\r\n// ============================================================================\r\n// useLocalStorage Hook\r\n// ============================================================================\r\n\r\nexport function useLocalStorage<T>(key: string, initialValue: T): [T, (value: T) => void] {\r\n  const [storedValue, setStoredValue] = useState<T>(() => {\r\n    try {\r\n      const item = window.localStorage.getItem(key)\r\n      return item ? JSON.parse(item) : initialValue\r\n    } catch (error) {\r\n      console.warn(`Error loading ${key} from localStorage:`, error)\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  const setValue = useCallback(\r\n    (value: T) => {\r\n      try {\r\n        setStoredValue(value)\r\n        window.localStorage.setItem(key, JSON.stringify(value))\r\n      } catch (error) {\r\n        console.warn(`Error saving ${key} to localStorage:`, error)\r\n      }\r\n    },\r\n    [key]\r\n  )\r\n\r\n  return [storedValue, setValue]\r\n}\r\n"]}