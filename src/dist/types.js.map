{"version":3,"sources":["../types.ts"],"names":["ANIMATION_PRESETS"],"mappings":"aAeO,IAAMA,CAAAA,CAAuE,CAClF,MAAA,CAAQ,CACN,SAAU,CAAA,CACV,KAAA,CAAO,IAAA,CACP,MAAA,CAAQ,SAAA,CACR,YAAA,CAAc,EAChB,CAAA,CACA,MAAA,CAAQ,CACN,QAAA,CAAU,GAAA,CACV,MAAO,GAAA,CACP,MAAA,CAAQ,WAAA,CACR,YAAA,CAAc,EAChB,CAAA,CACA,UAAW,CACT,QAAA,CAAU,IACV,KAAA,CAAO,GAAA,CACP,OAAQ,SAAA,CACR,YAAA,CAAc,EAChB,CAAA,CACA,QAAA,CAAU,CACR,SAAU,GAAA,CACV,KAAA,CAAO,KACP,MAAA,CAAQ,QAAA,CACR,aAAc,EAChB,CAAA,CACA,MAAA,CAAQ,EACV","file":"types.js","sourcesContent":["import * as THREE from \"three\"\r\n\r\n// ============================================================================\r\n// Animation Presets\r\n// ============================================================================\r\n\r\nexport type AnimationPreset = \"gentle\" | \"normal\" | \"energetic\" | \"dramatic\" | \"custom\"\r\n\r\nexport interface AnimationConfig {\r\n  distance: number\r\n  speed: number\r\n  easing: \"linear\" | \"easeIn\" | \"easeOut\" | \"easeInOut\" | \"bounce\"\r\n  staggerDelay?: number\r\n}\r\n\r\nexport const ANIMATION_PRESETS: Record<AnimationPreset, Partial<AnimationConfig>> = {\r\n  gentle: {\r\n    distance: 1.0,\r\n    speed: 1200,\r\n    easing: \"easeOut\",\r\n    staggerDelay: 20,\r\n  },\r\n  normal: {\r\n    distance: 1.5,\r\n    speed: 800,\r\n    easing: \"easeInOut\",\r\n    staggerDelay: 15,\r\n  },\r\n  energetic: {\r\n    distance: 2.5,\r\n    speed: 600,\r\n    easing: \"easeOut\",\r\n    staggerDelay: 10,\r\n  },\r\n  dramatic: {\r\n    distance: 3.5,\r\n    speed: 1500,\r\n    easing: \"bounce\",\r\n    staggerDelay: 30,\r\n  },\r\n  custom: {},\r\n}\r\n\r\n// ============================================================================\r\n// Material & Visual Options\r\n// ============================================================================\r\n\r\nexport interface MaterialOptions {\r\n  metalness?: number\r\n  roughness?: number\r\n  wireframe?: boolean\r\n  opacity?: number\r\n  emissive?: string\r\n  emissiveIntensity?: number\r\n}\r\n\r\nexport interface VisualOptions {\r\n  backgroundColor?: string\r\n  environmentPreset?: \"sunset\" | \"dawn\" | \"night\" | \"warehouse\" | \"forest\" | \"apartment\" | \"studio\" | \"city\" | \"park\" | \"lobby\"\r\n  gridHelper?: boolean\r\n  axesHelper?: boolean\r\n  stats?: boolean\r\n}\r\n\r\n// ============================================================================\r\n// Component Props\r\n// ============================================================================\r\n\r\nexport interface BreakGLBProps {\r\n  // Model Source\r\n  modelUrl?: string\r\n\r\n  // Visual Customization\r\n  backgroundColor?: string\r\n  environmentPreset?: VisualOptions[\"environmentPreset\"]\r\n  ambientLightIntensity?: number\r\n  directionalLightIntensity?: number\r\n  shadowsEnabled?: boolean\r\n  cameraFov?: number\r\n  cameraPosition?: [number, number, number]\r\n\r\n  // Material Customization\r\n  materialOptions?: MaterialOptions\r\n  highlightColor?: string\r\n  selectedPartColor?: string\r\n\r\n  // Debug Helpers\r\n  gridHelper?: boolean\r\n  axesHelper?: boolean\r\n\r\n  // Animation\r\n  animationPreset?: AnimationPreset\r\n  explosionDistance?: number\r\n  explosionSpeed?: number\r\n  animationEasing?: AnimationConfig[\"easing\"]\r\n  staggerDelay?: number\r\n\r\n  // Behavior Toggles\r\n  showUploadUI?: boolean\r\n  showControls?: boolean\r\n  showLoadingProgress?: boolean\r\n  autoExplode?: boolean\r\n  enablePartSelection?: boolean\r\n  enableLightControl?: boolean\r\n  enablePartDragging?: boolean\r\n\r\n  // Camera Controls\r\n  enableRotate?: boolean\r\n  enableZoom?: boolean\r\n  enablePan?: boolean\r\n  minDistance?: number\r\n  maxDistance?: number\r\n  autoRotate?: boolean\r\n  autoRotateSpeed?: number\r\n\r\n  // Interaction\r\n  doubleClickToExplode?: boolean\r\n  hoverHighlight?: boolean\r\n\r\n  // Lifecycle Callbacks\r\n  onLoad?: (model: THREE.Group, parts: ModelPart[]) => void\r\n  onLoadError?: (error: Error) => void\r\n  onLoadProgress?: (progress: number) => void\r\n  onExplode?: () => void\r\n  onAssemble?: () => void\r\n  onPartSelect?: (part: ModelPart | null) => void\r\n  onPartHover?: (part: ModelPart | null) => void\r\n\r\n  // Style Overrides\r\n  className?: string\r\n  containerStyle?: React.CSSProperties\r\n\r\n  // Advanced\r\n  maxPixelRatio?: number\r\n  antialias?: boolean\r\n}\r\n\r\n// ============================================================================\r\n// Model Part Interface\r\n// ============================================================================\r\n\r\nexport interface ModelPart {\r\n  id: string\r\n  name: string\r\n  object: THREE.Object3D\r\n  originalPosition: THREE.Vector3\r\n  originalRotation: THREE.Euler\r\n  boundingBox: THREE.Box3\r\n  center: THREE.Vector3\r\n  metadata?: Record<string, any>\r\n}\r\n\r\n// ============================================================================\r\n// Control API\r\n// ============================================================================\r\n\r\nexport interface BreakGLBRef {\r\n  explode: () => void\r\n  assemble: () => void\r\n  toggleExplode: () => void\r\n  selectPart: (partId: string | null) => void\r\n  resetCamera: () => void\r\n  focusPart: (partId: string) => void\r\n  getModel: () => THREE.Group | null\r\n  getParts: () => ModelPart[]\r\n  isExploded: () => boolean\r\n  exportSnapshot: () => Promise<string>\r\n}\r\n\r\n// ============================================================================\r\n// Internal Types\r\n// ============================================================================\r\n\r\nexport interface Part {\r\n  object: THREE.Object3D\r\n  originalPosition: THREE.Vector3\r\n  explodedPosition: THREE.Vector3\r\n  currentPosition: THREE.Vector3\r\n  velocity: THREE.Vector3\r\n  angularVelocity: THREE.Euler\r\n  originalRotation: THREE.Euler\r\n  name: string\r\n  id: string\r\n  center: THREE.Vector3\r\n  floatOffset: number\r\n  rotationSpeed: number\r\n  bobSpeed: number\r\n  boundingBox: THREE.Box3\r\n  collisionRadius: number\r\n  isDragging: boolean\r\n  collisionMesh: THREE.Mesh | null\r\n  grabOffset: THREE.Vector3\r\n  staggerDelay: number\r\n}\r\n\r\nexport interface ModelProps {\r\n  url: string\r\n  isExploded: boolean\r\n  selectedPart: string | null\r\n  onPartSelect: (partName: string | null) => void\r\n  onPartHover?: (partName: string | null) => void\r\n  onExplodeComplete?: () => void\r\n  onModelLoad?: (model: THREE.Group, parts: ModelPart[]) => void\r\n  lightPosition: THREE.Vector3\r\n  explosionDistance: number\r\n  staggerDelay: number\r\n  enablePartSelection: boolean\r\n  enablePartDragging: boolean\r\n  hoverHighlight: boolean\r\n  materialOptions?: MaterialOptions\r\n  highlightColor: string\r\n  selectedPartColor: string\r\n}\r\n"]}